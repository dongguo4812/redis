server:
  port: 8080
spring:
  application:
    name: redis_client
  # ========================alibaba.druid相关配置=====================
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/redis?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: root
    password: root
    druid:
      test-while-ide: false
  # ========================redis相关配置=====================
#  data:
#    redis:
#      host: 192.168.122.131
#      port: 6379
#      password: root
  data:
    redis:
      password: root
      cluster:
        nodes: 192.168.122.132:7001,192.168.122.133:7002,192.168.122.134:7003,192.168.122.135:7004,192.168.122.136:7005,192.168.122.137:7006
        #获取失败，最大重定向次数
        max-redirects: 3
      lettuce:
        cluster:
          refresh:
            #支持集群拓扑动态感应刷新，自适应拓扑刷新是否使用所有可用的更新，默认false关闭
            adaptive: true
            #定时刷新时间
            period: 2000
# ========================mybatis相关配置===================
mybatis:
  type-aliases-package: com.dongguo.redis.entity
  mapper-location: classpath:mapper/*.xml
# ========================logging 日志相关的配置=====================
logging:
  level:
    #系统默认，全局root配置的日志形式，可以注释掉
    root: info
    #开发人员自己设置的包结构，对那个package进行什么级别的日志监控
    com.dongguo.redis: info
  file:
    #开发人员自定义日志路径和日志名称
     name: E:/log/redis_client/redis.log
    #%d{HH:mm:ss.SSS}――日志输出时间
    #%thread――输出日志的进程名字，这在Web应用以及异步任务处理中很有用
    #%-5level――日志级别，并且使用5个字符靠左对齐
    #%logger- ――日志输出者的名字
    #%msg――日志消息
    #%n――平台的换行符
    #logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger- %msg%n
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger- %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger- %msg%n"
# ========================swagger=====================
springdoc:
  swagger-ui:
    enabled: true
    path: /swagger-ui.html